name: "hey"

on:
  push:
     branches:
      - master

  workflow_dispatch:
    inputs:
      version:
        required: false
        type: string
env:
  HELM_EXPERIMENTAL_OCI: 1

permissions:
  contents: write
  pull-requests: write

jobs:
  log-the-inputs:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.version != '' }}
        run: |
          echo "version: $VERSION"
        env:
          VERSION: ${{ inputs.version }}

      - uses: actions/checkout@v2
        name: checkout repo

      # - name: Get version
      #   id: get_version
      #   if: ${{ inputs.version == '' }}
      #   run: |
      #      cat package.json  # Debugging line: Print the content of package.json
      #      export VERSION=$(cat package.json | grep '"version"' | awk -F '"' '{print $4; exit}')
      #      echo "Extracted version: $VERSION"  # Debugging line: Print the extracted version
      #      echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get version
        id: get_version
        if: ${{ inputs.version == '' }}
        run: |
          VERSION=$(cat package.json | jq -r '.version' | sed "s/^/'/;s/$/'/")
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Run Match Version Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: $(cat package.json | jq -r '.version' | sed "s/^/'/;s/$/'/")
        run: |
          VERSION=$(cat package.json | jq -r '.version' | sed "s/^/'/;s/$/'/") python .github/scripts/bump-copy.py ${{ secrets.GITHUB_TOKEN }} 

  # build:
  #   name: publish acr
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   needs: chart-update
  #   steps:    
  #     - uses: actions/checkout@v2
  #       name: checkout repo

  #     - name: install helm
  #       uses: Azure/setup-helm@v1
  #       with:
  #         version: 'v3.6.3'

  #     - name: login to acr using helm
  #       run: |
  #         helm registry login ${{ secrets.ACR_URL }} --username ${{ secrets.ACR_PUSH_USER }} --password ${{ secrets.ACR_PUSH_TOKEN }} 

  #     - name: Get Chart name
  #       id: get_chart
  #       run: |
  #         export "CHART=$(cat Chart.yaml | grep name | awk '{print $2; exit}')"
  #         echo "CHART=$CHART" >> $GITHUB_ENV
  #       working-directory: ./helm

  #     - name: save helm chart to local registry
  #       run: |
  #         helm chart save . '${{ secrets.ACR_URL }}/helm/${{ env.CHART }}:${{ needs.chart-update.outputs.new_version }}'
  #       working-directory: ./helm
      
  #     - name: publish chart to acr
  #       run: |
  #         helm chart push ${{ secrets.ACR_URL }}/helm/${{ env.CHART }}:${{ needs.chart-update.outputs.new_version }}
  #       working-directory: ./helm